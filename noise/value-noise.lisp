(in-package :nineveh.noise)

(defun-g value-noise ((p :vec2))
  (let* ((pi (floor p))
         (pf (- p pi))
         (hash (bs-fast32-hash pi))
         (blend (perlin-quintic pf))
         (blend2 (v! blend (- (v2! 1.0) blend))))
    (dot hash (* (s~ blend2 :zxzx) (s~ blend2 :wwyy)))))

(defun-g value-noise ((p :vec3))
  (let* ((pi (floor p))
         (pf (- p pi)))
    (multiple-value-bind (hash-lowz hash-highz) (bs-fast32-hash pi)
      (let* ((blend (perlin-quintic pf))
             (res0 (mix hash-lowz hash-highz (z blend)))
             (blend2 (v! (s~ blend :xy) (- (v2! 1.0) (s~ blend :xy)))))
        (dot res0 (* (s~ blend2 :zxzx) (s~ blend2 :wwyy)))))))

(defun-g value-noise ((p :vec4))
  (let* ((pi (floor p))
         (pf (- p pi)))
    (multiple-value-bind (z0w0-hash z1w0-hash z0w1-hash z1w1-hash)
        (bs-quick32-hash pi)
      (let* ((blend (perlin-quintic pf))
             (res0 (+ z0w0-hash (* (- z0w1-hash z0w0-hash) (s~ blend :wwww))))
             (res1 (+ z1w0-hash (* (- z1w1-hash z1w0-hash) (s~ blend :wwww)))))
        (setf res0 (+ res0 (* (- res1 res0) (s~ blend :zzzz))))
        (setf (s~ blend :zw) (- (v2! 1.0) (s~ blend :xy)))
        (dot res0 (* (s~ blend :zxzx) (s~ blend :wwyy)))))))
